{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\nasync function fetchJson(url, options, onCancel) {\n  try {\n    console.log(url);\n    console.log(options);\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      console.log(\"1\");\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    if (response.status === 204) {\n      console.log(\"2\");\n      return null;\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.log(\"3\");\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n//get a list of all questions\nexport async function getAllQuestions(signal) {\n  const url = `${API_BASE_URL}/questions`;\n  return await fetchJson(url, {\n    signal\n  }, []);\n}\n\n//creates a new question\nexport async function createQuestion(question, signal) {\n  const url = `${API_BASE_URL}/questions`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      question\n    }),\n    signal\n  };\n  return await fetchJson(url, options, question);\n}\nexport async function readQuestion(question_id, signal) {\n  const url = `${API_BASE_URL}/questions/${question_id}`;\n  return await fetchJson(url, {\n    signal\n  }, {});\n}\n//updates a question\nexport async function updateQuestion(question, signal) {\n  const url = `${API_BASE_URL}/questions/${question.question_id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      question\n    }),\n    signal\n  };\n  return await fetchJson(url, options, question);\n}\n//deletes a question\nexport async function deleteQuestion(question_id, signal) {\n  const url = `${API_BASE_URL}/questions/${question_id}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options, []);\n}\nexport async function postQuizScore(score, signal) {\n  const url = `${API_BASE_URL}/scores`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      score\n    }),\n    signal\n  };\n  return await fetchJson(url, options, score);\n}\n//get a list of all scores\nexport async function getAllScores(signal) {\n  const url = `${API_BASE_URL}/scores`;\n  return await fetchJson(url, {\n    signal\n  }, []);\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","console","log","response","fetch","status","Error","statusText","json","error","name","stack","Promise","resolve","getAllQuestions","signal","createQuestion","question","method","body","JSON","stringify","readQuestion","question_id","updateQuestion","deleteQuestion","postQuizScore","score","getAllScores"],"sources":["C:/Users/mercy/fullstack-projects/quiz-application/front-end/src/api/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\nasync function fetchJson(url, options, onCancel){\r\n  try{\r\n    console.log(url)\r\n    console.log(options)\r\n    const response = await fetch(url,options);\r\n    if(response.status < 200 || response.status > 399){\r\n      console.log(\"1\")\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n    if(response.status === 204){\r\n      console.log(\"2\")\r\n      return null;\r\n    }\r\n    return await response.json();\r\n  }catch(error){\r\n    if(error.name !== \"AbortError\"){\r\n      console.log(\"3\")\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n//get a list of all questions\r\nexport async function getAllQuestions(signal){\r\n  const url = `${API_BASE_URL}/questions`;\r\n  return await fetchJson(url, {signal}, [])\r\n}\r\n\r\n//creates a new question\r\nexport async function createQuestion(question, signal){\r\n  const url = `${API_BASE_URL}/questions`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({question}),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, question);\r\n}\r\nexport async function readQuestion(question_id, signal){\r\n  const url = `${API_BASE_URL}/questions/${question_id}`;\r\n  return await fetchJson(url, {signal}, {})\r\n}\r\n//updates a question\r\nexport async function updateQuestion(question, signal){\r\n  const url = `${API_BASE_URL}/questions/${question.question_id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify({question}),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, question);\r\n}\r\n//deletes a question\r\nexport async function deleteQuestion(question_id, signal){\r\n  const url = `${API_BASE_URL}/questions/${question_id}`\r\n  const options = {\r\n    method: \"DELETE\",\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, []);\r\n}\r\nexport async function postQuizScore(score, signal){\r\n  const url = `${API_BASE_URL}/scores`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({score}),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, score);\r\n}\r\n//get a list of all scores\r\nexport async function getAllScores(signal){\r\n  const url = `${API_BASE_URL}/scores`;\r\n  return await fetchJson(url, {signal}, [])\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}